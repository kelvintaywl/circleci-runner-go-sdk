// Code generated by go-swagger; DO NOT EDIT.

package token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-runner-go-sdk/models"
)

// ListTokensReader is a Reader for the ListTokens structure.
type ListTokensReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTokensReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTokensOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListTokensBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListTokensNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListTokensOK creates a ListTokensOK with default headers values
func NewListTokensOK() *ListTokensOK {
	return &ListTokensOK{}
}

/*
ListTokensOK describes a response with status code 200, with default header values.

A sequence of Runner tokens
*/
type ListTokensOK struct {
	Payload *models.TokensInfo
}

// IsSuccess returns true when this list tokens o k response has a 2xx status code
func (o *ListTokensOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list tokens o k response has a 3xx status code
func (o *ListTokensOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list tokens o k response has a 4xx status code
func (o *ListTokensOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list tokens o k response has a 5xx status code
func (o *ListTokensOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list tokens o k response a status code equal to that given
func (o *ListTokensOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListTokensOK) Error() string {
	return fmt.Sprintf("[GET /v2/runner/token][%d] listTokensOK  %+v", 200, o.Payload)
}

func (o *ListTokensOK) String() string {
	return fmt.Sprintf("[GET /v2/runner/token][%d] listTokensOK  %+v", 200, o.Payload)
}

func (o *ListTokensOK) GetPayload() *models.TokensInfo {
	return o.Payload
}

func (o *ListTokensOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokensInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTokensBadRequest creates a ListTokensBadRequest with default headers values
func NewListTokensBadRequest() *ListTokensBadRequest {
	return &ListTokensBadRequest{}
}

/*
ListTokensBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type ListTokensBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this list tokens bad request response has a 2xx status code
func (o *ListTokensBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list tokens bad request response has a 3xx status code
func (o *ListTokensBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list tokens bad request response has a 4xx status code
func (o *ListTokensBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list tokens bad request response has a 5xx status code
func (o *ListTokensBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list tokens bad request response a status code equal to that given
func (o *ListTokensBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListTokensBadRequest) Error() string {
	return fmt.Sprintf("[GET /v2/runner/token][%d] listTokensBadRequest  %+v", 400, o.Payload)
}

func (o *ListTokensBadRequest) String() string {
	return fmt.Sprintf("[GET /v2/runner/token][%d] listTokensBadRequest  %+v", 400, o.Payload)
}

func (o *ListTokensBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *ListTokensBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTokensNotFound creates a ListTokensNotFound with default headers values
func NewListTokensNotFound() *ListTokensNotFound {
	return &ListTokensNotFound{}
}

/*
ListTokensNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ListTokensNotFound struct {
	Payload *models.Errored
}

// IsSuccess returns true when this list tokens not found response has a 2xx status code
func (o *ListTokensNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list tokens not found response has a 3xx status code
func (o *ListTokensNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list tokens not found response has a 4xx status code
func (o *ListTokensNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list tokens not found response has a 5xx status code
func (o *ListTokensNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list tokens not found response a status code equal to that given
func (o *ListTokensNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListTokensNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/runner/token][%d] listTokensNotFound  %+v", 404, o.Payload)
}

func (o *ListTokensNotFound) String() string {
	return fmt.Sprintf("[GET /v2/runner/token][%d] listTokensNotFound  %+v", 404, o.Payload)
}

func (o *ListTokensNotFound) GetPayload() *models.Errored {
	return o.Payload
}

func (o *ListTokensNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
