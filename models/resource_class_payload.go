// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceClassPayload resource class payload
//
// swagger:model ResourceClassPayload
type ResourceClassPayload struct {

	// Description of Runner resource-class
	// Required: true
	Description *string `json:"description"`

	// Runner resource-class name (namespace/name)
	// Required: true
	ResourceClass *string `json:"resource_class"`
}

// Validate validates this resource class payload
func (m *ResourceClassPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceClass(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceClassPayload) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ResourceClassPayload) validateResourceClass(formats strfmt.Registry) error {

	if err := validate.Required("resource_class", "body", m.ResourceClass); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resource class payload based on context it is used
func (m *ResourceClassPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourceClassPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceClassPayload) UnmarshalBinary(b []byte) error {
	var res ResourceClassPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
